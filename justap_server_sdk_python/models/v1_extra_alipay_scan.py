# coding: utf-8

"""
    Justap API

    欢迎阅读 Justap Api 文档  Justap 是为移动端应用和PC端应用打造的下一代聚合支付SAAS服务平台，通过一个 SDK 即可快速的支持各种形式的应用，并且一次接口完成多个不同支付渠道的接入。平台除了支持服务商子商户模式，同时还对商家自有商户（即自己前往微信、支付宝等机构开户）提供了完整的支持。  感谢您的支持，我们将不断探索，为您提供更优质的服务！如需技术支持可前往商户中心提交工单，支持工程师会尽快与您取得联系！  # 文档说明 采用 REST 风格设计。所有接口请求地址都是可预期的以及面向资源的。使用规范的 HTTP 响应代码来表示请求结果的正确或错误信息。使用 HTTP 内置的特性，如 HTTP Authentication 和 HTTP 请求方法让接口易于理解。  ## HTTP 状态码 HTTP 状态码可以用于表明服务的状态。服务器返回的 HTTP 状态码遵循 [RFC 7231](http://tools.ietf.org/html/rfc7231#section-6) 和 [IANA Status Code Registry](http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 标准。  ## 认证 在调用 API 时，必须提供 API Key 作为每个请求的身份验证。你可以在管理平台内管理你的 API Key。API Key 是商户在系统中的身份标识，请安全存储，确保其不要被泄露。如需获取或更新 API Key ，也可以在商户中心内进行操作。 Api Key 在使用自定义的 HTTP Header 进行传递。  ``` X-Justap-Api-Key ```  API Key 分为 live 和 test 两种模式。分别对应真实交易环境和模拟测试交易环境并且可以实时切换。 测试模式下的 API Key 会模拟交易等请求，但是不会产生任何真实交易行为和费用，便于调试和接入。  **⚠️ 注意**：在使用 live 模式前，需要先前往 `商户中心 -> 应用设置 -> 开发参数` 开启 live 模式。  <SecurityDefinitions />  ## 请求类型 所有的 API 请求只支持 HTTPS 方式调用。  ## 路由参数 路由参数是指出现在 URL 路径中的可变变量。在本文档中，使用 `{}` 包裹的部分。 例如： `{charge_id}`，在实际使用是，需要将 `{charge_id}` 替换为实际值 `charge_8a8sdf888888`  ## MIME Type MIME 类型用于指示服务器返回的数据格式。服务器目前默认采用 `application/json`。  例如: ``` application/json ```  ## 错误 服务器使用 HTTP 状态码 (status code) 来表明一个 API 请求的成功或失败状态。返回 HTTP 2XX 表明 API 请求成功。返回 HTTP 4XX 表明在请求 API 时提供了错误信息，例如参数缺失、参数错误、支付渠道错误等。返回 HTTP 5XX 表明 API 请求时，服务器发生了错误。 在返回错误的状态码时，回同时返回一些错误信息提示出错原因。  具体的错误码我们正在整理当中。  ## 分页 所有的 Justap 资源都可以被 list API 方法支持，例如分页 charges 和 refunds。这些 list API 方法拥有相同的数据结构。Justap 是基于 cursor 的分页机制，使用参数 starting_after 来决定列表从何处开始，使用参数 ending_before 来决定列表从何处结束。  ## 参数说明 请求参数中包含的以下字段释义请参考：  - REQUIRED: 必填参数 - OPTIONAL: 可选参数，可以在请求当前接口时按需传入 - CONDITIONAL: 在某些条件下必传 - RESPONSE-ONLY: 标示该参数仅在接口返回参数中出现，调用 API 时无需传入  # 如何保证幂等性 如果发生请求超时或服务器内部错误，客户端可能会尝试重发请求。您可以在请求中设置 ClientToken 参数避免多次重试带来重复操作的问题。  ## 什么是幂等性 在数学计算或者计算机科学中，幂等性（idempotence）是指相同操作或资源在一次或多次请求中具有同样效果的作用。幂等性是在分布式系统设计中具有十分重要的地位。  ## 保证幂等性 通常情况下，客户端只需要在500（InternalErrorInternalError）或503（ServiceUnavailable）错误，或者无法获取响应结果时重试。充实时您可以从客户端生成一个参数值不超过64个的ASCII字符，并将值赋予 ClientToken，保证重试请求的幂等性。  ## ClientToken 详解 ClientToken参数的详细信息如下所示。  - ClientToken 是一个由客户端生成的唯一的、大小写敏感、不超过64个ASCII字符的字符串。例如，`ClientToken=123e4567-e89b-12d3-a456-426655440000`。 - 如果您提供了一个已经使用过的 ClientToken，但其他请求参数**有变化**，则服务器会返回 IdempotentParameterMismatch 的错误代码。 - 如果您提供了一个已经使用过的 ClientToken，且其他请求参数**不变**，则服务器会尝试返回 ClientToken 对应的记录。  ## API列表 以下为部分包含了 ClientToken 参数的API，供您参考。具体哪些API支持 ClientToken 参数请以各 API 文档为准，此处不一一列举。  - [申请退款接口](https://www.justap.cn/docs#operation/TradeService_Refunds)  # 签名 为保证安全，JUSTAP 所有接口均需要对请求进行签名。服务器收到请求后进行签名的验证。如果签名验证不通过，将会拒绝处理请求，并返回 401 Unauthorized。  签名算法：  ``` base64Encode(hamc-sha256(md5(请求 body + 请求时间戳 + 一次性随机字符串) + 一次性随机字符串)) ```  ## 准备 首先需要在 Justap 创建一个应用，商户需要生成一对 RSA 密钥对，并将公钥配置到 `商户中心 -> 开发配置`。 RSA 可以使用支付宝提供的 [密钥生成工具](https://opendocs.alipay.com/common/02kipl) 来生成。  商户在使用时，可以按照下述步骤生成请求的签名。   ## 算法描述: - 在请求发送前，取完整的**请求 body** - 生成一个随机的32位字符串，得到 **一次性随机字符串** - 获取当前时间的时间戳，得到 **请求时间戳** - 在请求字符串后面拼接上 **请求时间戳** 和 **一次性随机字符串**，得到 **待 Hash 字符串** - 对 **待 Hash 字符串** 计算 md5，得到 **待签名字符串** - **待签名字符串** 后面拼接上 一次性随机字符串，得到完整的 **待签名字符串** - 使用商户 RSA 私钥，对 **待签名字符串** 计算签名，并对 结果 进行 base64 编码，即可得到 **签名**  ## 设置HTTP头 Justap 要求请求通过 自定义头部 来传递签名。具体定义如下:  ``` X-Justap-Signature: 签名 X-Justap-Request-Time: 请求时间戳 X-Justap-Nonce: 一次性随机字符串 X-Justap-Body-Hash: 待签名字符串 ```  具体的签名算法实现，可参考我们提供的各语言 SDK。  # WebHooks   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@justap.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from justap_server_sdk_python.configuration import Configuration


class V1ExtraAlipayScan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'advance_payment_type': 'str',
        'agreement_params': 'V1ExtraAlipayAgreementParams',
        'auth_code': 'str',
        'auth_confirm_mode': 'str',
        'auth_no': 'str',
        'buyer_id': 'str',
        'buyer_logon_id': 'str',
        'buyer_pay_amount': 'str',
        'buyer_user_id': 'str',
        'discount_amount': 'str',
        'discount_goods_detail': 'str',
        'discountable_amount': 'float',
        'extend_params': 'V1ExtraAlipayExtendParams',
        'fund_bill_list': 'V1ExtraAlipayFundBillList',
        'gmt_payment': 'str',
        'goods_detail': 'list[V1ExtraAlipayGoodsDetail]',
        'invoice_amount': 'str',
        'is_async_pay': 'V1ExtraAlipayPayParams',
        'mdiscount_amount': 'str',
        'operator_id': 'str',
        'pay_params': 'str',
        'point_amount': 'str',
        'product_code': 'str',
        'query_options': 'str',
        'receipt_amount': 'str',
        'request_org_pid': 'str',
        'scene': 'str',
        'settle_info': 'V1ExtraAlipaySettleInfo',
        'store_id': 'str',
        'store_name': 'str',
        'sub_merchant': 'V1ExtraAlipaySubMerchant',
        'terminal_id': 'str',
        'total_amount': 'str',
        'undiscountable_amount': 'float',
        'voucher_detail_list': 'V1ExtraAlipayVoucherDetailList'
    }

    attribute_map = {
        'advance_payment_type': 'advance_payment_type',
        'agreement_params': 'agreement_params',
        'auth_code': 'auth_code',
        'auth_confirm_mode': 'auth_confirm_mode',
        'auth_no': 'auth_no',
        'buyer_id': 'buyer_id',
        'buyer_logon_id': 'buyer_logon_id',
        'buyer_pay_amount': 'buyer_pay_amount',
        'buyer_user_id': 'buyer_user_id',
        'discount_amount': 'discount_amount',
        'discount_goods_detail': 'discount_goods_detail',
        'discountable_amount': 'discountable_amount',
        'extend_params': 'extend_params',
        'fund_bill_list': 'fund_bill_list',
        'gmt_payment': 'gmt_payment',
        'goods_detail': 'goods_detail',
        'invoice_amount': 'invoice_amount',
        'is_async_pay': 'is_async_pay',
        'mdiscount_amount': 'mdiscount_amount',
        'operator_id': 'operator_id',
        'pay_params': 'pay_params',
        'point_amount': 'point_amount',
        'product_code': 'product_code',
        'query_options': 'query_options',
        'receipt_amount': 'receipt_amount',
        'request_org_pid': 'request_org_pid',
        'scene': 'scene',
        'settle_info': 'settle_info',
        'store_id': 'store_id',
        'store_name': 'store_name',
        'sub_merchant': 'sub_merchant',
        'terminal_id': 'terminal_id',
        'total_amount': 'total_amount',
        'undiscountable_amount': 'undiscountable_amount',
        'voucher_detail_list': 'voucher_detail_list'
    }

    def __init__(self, advance_payment_type=None, agreement_params=None, auth_code=None, auth_confirm_mode=None, auth_no=None, buyer_id=None, buyer_logon_id=None, buyer_pay_amount=None, buyer_user_id=None, discount_amount=None, discount_goods_detail=None, discountable_amount=None, extend_params=None, fund_bill_list=None, gmt_payment=None, goods_detail=None, invoice_amount=None, is_async_pay=None, mdiscount_amount=None, operator_id=None, pay_params=None, point_amount=None, product_code=None, query_options=None, receipt_amount=None, request_org_pid=None, scene=None, settle_info=None, store_id=None, store_name=None, sub_merchant=None, terminal_id=None, total_amount=None, undiscountable_amount=None, voucher_detail_list=None, _configuration=None):  # noqa: E501
        """V1ExtraAlipayScan - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._advance_payment_type = None
        self._agreement_params = None
        self._auth_code = None
        self._auth_confirm_mode = None
        self._auth_no = None
        self._buyer_id = None
        self._buyer_logon_id = None
        self._buyer_pay_amount = None
        self._buyer_user_id = None
        self._discount_amount = None
        self._discount_goods_detail = None
        self._discountable_amount = None
        self._extend_params = None
        self._fund_bill_list = None
        self._gmt_payment = None
        self._goods_detail = None
        self._invoice_amount = None
        self._is_async_pay = None
        self._mdiscount_amount = None
        self._operator_id = None
        self._pay_params = None
        self._point_amount = None
        self._product_code = None
        self._query_options = None
        self._receipt_amount = None
        self._request_org_pid = None
        self._scene = None
        self._settle_info = None
        self._store_id = None
        self._store_name = None
        self._sub_merchant = None
        self._terminal_id = None
        self._total_amount = None
        self._undiscountable_amount = None
        self._voucher_detail_list = None
        self.discriminator = None

        if advance_payment_type is not None:
            self.advance_payment_type = advance_payment_type
        if agreement_params is not None:
            self.agreement_params = agreement_params
        if auth_code is not None:
            self.auth_code = auth_code
        if auth_confirm_mode is not None:
            self.auth_confirm_mode = auth_confirm_mode
        if auth_no is not None:
            self.auth_no = auth_no
        if buyer_id is not None:
            self.buyer_id = buyer_id
        if buyer_logon_id is not None:
            self.buyer_logon_id = buyer_logon_id
        if buyer_pay_amount is not None:
            self.buyer_pay_amount = buyer_pay_amount
        if buyer_user_id is not None:
            self.buyer_user_id = buyer_user_id
        if discount_amount is not None:
            self.discount_amount = discount_amount
        if discount_goods_detail is not None:
            self.discount_goods_detail = discount_goods_detail
        if discountable_amount is not None:
            self.discountable_amount = discountable_amount
        if extend_params is not None:
            self.extend_params = extend_params
        if fund_bill_list is not None:
            self.fund_bill_list = fund_bill_list
        if gmt_payment is not None:
            self.gmt_payment = gmt_payment
        if goods_detail is not None:
            self.goods_detail = goods_detail
        if invoice_amount is not None:
            self.invoice_amount = invoice_amount
        if is_async_pay is not None:
            self.is_async_pay = is_async_pay
        if mdiscount_amount is not None:
            self.mdiscount_amount = mdiscount_amount
        if operator_id is not None:
            self.operator_id = operator_id
        if pay_params is not None:
            self.pay_params = pay_params
        if point_amount is not None:
            self.point_amount = point_amount
        if product_code is not None:
            self.product_code = product_code
        if query_options is not None:
            self.query_options = query_options
        if receipt_amount is not None:
            self.receipt_amount = receipt_amount
        if request_org_pid is not None:
            self.request_org_pid = request_org_pid
        if scene is not None:
            self.scene = scene
        if settle_info is not None:
            self.settle_info = settle_info
        if store_id is not None:
            self.store_id = store_id
        if store_name is not None:
            self.store_name = store_name
        if sub_merchant is not None:
            self.sub_merchant = sub_merchant
        if terminal_id is not None:
            self.terminal_id = terminal_id
        if total_amount is not None:
            self.total_amount = total_amount
        if undiscountable_amount is not None:
            self.undiscountable_amount = undiscountable_amount
        if voucher_detail_list is not None:
            self.voucher_detail_list = voucher_detail_list

    @property
    def advance_payment_type(self):
        """Gets the advance_payment_type of this V1ExtraAlipayScan.  # noqa: E501


        :return: The advance_payment_type of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._advance_payment_type

    @advance_payment_type.setter
    def advance_payment_type(self, advance_payment_type):
        """Sets the advance_payment_type of this V1ExtraAlipayScan.


        :param advance_payment_type: The advance_payment_type of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._advance_payment_type = advance_payment_type

    @property
    def agreement_params(self):
        """Gets the agreement_params of this V1ExtraAlipayScan.  # noqa: E501


        :return: The agreement_params of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: V1ExtraAlipayAgreementParams
        """
        return self._agreement_params

    @agreement_params.setter
    def agreement_params(self, agreement_params):
        """Sets the agreement_params of this V1ExtraAlipayScan.


        :param agreement_params: The agreement_params of this V1ExtraAlipayScan.  # noqa: E501
        :type: V1ExtraAlipayAgreementParams
        """

        self._agreement_params = agreement_params

    @property
    def auth_code(self):
        """Gets the auth_code of this V1ExtraAlipayScan.  # noqa: E501


        :return: The auth_code of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this V1ExtraAlipayScan.


        :param auth_code: The auth_code of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._auth_code = auth_code

    @property
    def auth_confirm_mode(self):
        """Gets the auth_confirm_mode of this V1ExtraAlipayScan.  # noqa: E501


        :return: The auth_confirm_mode of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._auth_confirm_mode

    @auth_confirm_mode.setter
    def auth_confirm_mode(self, auth_confirm_mode):
        """Sets the auth_confirm_mode of this V1ExtraAlipayScan.


        :param auth_confirm_mode: The auth_confirm_mode of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._auth_confirm_mode = auth_confirm_mode

    @property
    def auth_no(self):
        """Gets the auth_no of this V1ExtraAlipayScan.  # noqa: E501


        :return: The auth_no of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._auth_no

    @auth_no.setter
    def auth_no(self, auth_no):
        """Sets the auth_no of this V1ExtraAlipayScan.


        :param auth_no: The auth_no of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._auth_no = auth_no

    @property
    def buyer_id(self):
        """Gets the buyer_id of this V1ExtraAlipayScan.  # noqa: E501


        :return: The buyer_id of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._buyer_id

    @buyer_id.setter
    def buyer_id(self, buyer_id):
        """Sets the buyer_id of this V1ExtraAlipayScan.


        :param buyer_id: The buyer_id of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._buyer_id = buyer_id

    @property
    def buyer_logon_id(self):
        """Gets the buyer_logon_id of this V1ExtraAlipayScan.  # noqa: E501


        :return: The buyer_logon_id of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._buyer_logon_id

    @buyer_logon_id.setter
    def buyer_logon_id(self, buyer_logon_id):
        """Sets the buyer_logon_id of this V1ExtraAlipayScan.


        :param buyer_logon_id: The buyer_logon_id of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._buyer_logon_id = buyer_logon_id

    @property
    def buyer_pay_amount(self):
        """Gets the buyer_pay_amount of this V1ExtraAlipayScan.  # noqa: E501


        :return: The buyer_pay_amount of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._buyer_pay_amount

    @buyer_pay_amount.setter
    def buyer_pay_amount(self, buyer_pay_amount):
        """Sets the buyer_pay_amount of this V1ExtraAlipayScan.


        :param buyer_pay_amount: The buyer_pay_amount of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._buyer_pay_amount = buyer_pay_amount

    @property
    def buyer_user_id(self):
        """Gets the buyer_user_id of this V1ExtraAlipayScan.  # noqa: E501


        :return: The buyer_user_id of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._buyer_user_id

    @buyer_user_id.setter
    def buyer_user_id(self, buyer_user_id):
        """Sets the buyer_user_id of this V1ExtraAlipayScan.


        :param buyer_user_id: The buyer_user_id of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._buyer_user_id = buyer_user_id

    @property
    def discount_amount(self):
        """Gets the discount_amount of this V1ExtraAlipayScan.  # noqa: E501


        :return: The discount_amount of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this V1ExtraAlipayScan.


        :param discount_amount: The discount_amount of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._discount_amount = discount_amount

    @property
    def discount_goods_detail(self):
        """Gets the discount_goods_detail of this V1ExtraAlipayScan.  # noqa: E501


        :return: The discount_goods_detail of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._discount_goods_detail

    @discount_goods_detail.setter
    def discount_goods_detail(self, discount_goods_detail):
        """Sets the discount_goods_detail of this V1ExtraAlipayScan.


        :param discount_goods_detail: The discount_goods_detail of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._discount_goods_detail = discount_goods_detail

    @property
    def discountable_amount(self):
        """Gets the discountable_amount of this V1ExtraAlipayScan.  # noqa: E501


        :return: The discountable_amount of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: float
        """
        return self._discountable_amount

    @discountable_amount.setter
    def discountable_amount(self, discountable_amount):
        """Sets the discountable_amount of this V1ExtraAlipayScan.


        :param discountable_amount: The discountable_amount of this V1ExtraAlipayScan.  # noqa: E501
        :type: float
        """

        self._discountable_amount = discountable_amount

    @property
    def extend_params(self):
        """Gets the extend_params of this V1ExtraAlipayScan.  # noqa: E501


        :return: The extend_params of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: V1ExtraAlipayExtendParams
        """
        return self._extend_params

    @extend_params.setter
    def extend_params(self, extend_params):
        """Sets the extend_params of this V1ExtraAlipayScan.


        :param extend_params: The extend_params of this V1ExtraAlipayScan.  # noqa: E501
        :type: V1ExtraAlipayExtendParams
        """

        self._extend_params = extend_params

    @property
    def fund_bill_list(self):
        """Gets the fund_bill_list of this V1ExtraAlipayScan.  # noqa: E501


        :return: The fund_bill_list of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: V1ExtraAlipayFundBillList
        """
        return self._fund_bill_list

    @fund_bill_list.setter
    def fund_bill_list(self, fund_bill_list):
        """Sets the fund_bill_list of this V1ExtraAlipayScan.


        :param fund_bill_list: The fund_bill_list of this V1ExtraAlipayScan.  # noqa: E501
        :type: V1ExtraAlipayFundBillList
        """

        self._fund_bill_list = fund_bill_list

    @property
    def gmt_payment(self):
        """Gets the gmt_payment of this V1ExtraAlipayScan.  # noqa: E501


        :return: The gmt_payment of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._gmt_payment

    @gmt_payment.setter
    def gmt_payment(self, gmt_payment):
        """Sets the gmt_payment of this V1ExtraAlipayScan.


        :param gmt_payment: The gmt_payment of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._gmt_payment = gmt_payment

    @property
    def goods_detail(self):
        """Gets the goods_detail of this V1ExtraAlipayScan.  # noqa: E501


        :return: The goods_detail of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: list[V1ExtraAlipayGoodsDetail]
        """
        return self._goods_detail

    @goods_detail.setter
    def goods_detail(self, goods_detail):
        """Sets the goods_detail of this V1ExtraAlipayScan.


        :param goods_detail: The goods_detail of this V1ExtraAlipayScan.  # noqa: E501
        :type: list[V1ExtraAlipayGoodsDetail]
        """

        self._goods_detail = goods_detail

    @property
    def invoice_amount(self):
        """Gets the invoice_amount of this V1ExtraAlipayScan.  # noqa: E501


        :return: The invoice_amount of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._invoice_amount

    @invoice_amount.setter
    def invoice_amount(self, invoice_amount):
        """Sets the invoice_amount of this V1ExtraAlipayScan.


        :param invoice_amount: The invoice_amount of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._invoice_amount = invoice_amount

    @property
    def is_async_pay(self):
        """Gets the is_async_pay of this V1ExtraAlipayScan.  # noqa: E501


        :return: The is_async_pay of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: V1ExtraAlipayPayParams
        """
        return self._is_async_pay

    @is_async_pay.setter
    def is_async_pay(self, is_async_pay):
        """Sets the is_async_pay of this V1ExtraAlipayScan.


        :param is_async_pay: The is_async_pay of this V1ExtraAlipayScan.  # noqa: E501
        :type: V1ExtraAlipayPayParams
        """

        self._is_async_pay = is_async_pay

    @property
    def mdiscount_amount(self):
        """Gets the mdiscount_amount of this V1ExtraAlipayScan.  # noqa: E501


        :return: The mdiscount_amount of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._mdiscount_amount

    @mdiscount_amount.setter
    def mdiscount_amount(self, mdiscount_amount):
        """Sets the mdiscount_amount of this V1ExtraAlipayScan.


        :param mdiscount_amount: The mdiscount_amount of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._mdiscount_amount = mdiscount_amount

    @property
    def operator_id(self):
        """Gets the operator_id of this V1ExtraAlipayScan.  # noqa: E501


        :return: The operator_id of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this V1ExtraAlipayScan.


        :param operator_id: The operator_id of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._operator_id = operator_id

    @property
    def pay_params(self):
        """Gets the pay_params of this V1ExtraAlipayScan.  # noqa: E501


        :return: The pay_params of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._pay_params

    @pay_params.setter
    def pay_params(self, pay_params):
        """Sets the pay_params of this V1ExtraAlipayScan.


        :param pay_params: The pay_params of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._pay_params = pay_params

    @property
    def point_amount(self):
        """Gets the point_amount of this V1ExtraAlipayScan.  # noqa: E501


        :return: The point_amount of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._point_amount

    @point_amount.setter
    def point_amount(self, point_amount):
        """Sets the point_amount of this V1ExtraAlipayScan.


        :param point_amount: The point_amount of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._point_amount = point_amount

    @property
    def product_code(self):
        """Gets the product_code of this V1ExtraAlipayScan.  # noqa: E501


        :return: The product_code of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this V1ExtraAlipayScan.


        :param product_code: The product_code of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def query_options(self):
        """Gets the query_options of this V1ExtraAlipayScan.  # noqa: E501


        :return: The query_options of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._query_options

    @query_options.setter
    def query_options(self, query_options):
        """Sets the query_options of this V1ExtraAlipayScan.


        :param query_options: The query_options of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._query_options = query_options

    @property
    def receipt_amount(self):
        """Gets the receipt_amount of this V1ExtraAlipayScan.  # noqa: E501


        :return: The receipt_amount of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._receipt_amount

    @receipt_amount.setter
    def receipt_amount(self, receipt_amount):
        """Sets the receipt_amount of this V1ExtraAlipayScan.


        :param receipt_amount: The receipt_amount of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._receipt_amount = receipt_amount

    @property
    def request_org_pid(self):
        """Gets the request_org_pid of this V1ExtraAlipayScan.  # noqa: E501


        :return: The request_org_pid of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._request_org_pid

    @request_org_pid.setter
    def request_org_pid(self, request_org_pid):
        """Sets the request_org_pid of this V1ExtraAlipayScan.


        :param request_org_pid: The request_org_pid of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._request_org_pid = request_org_pid

    @property
    def scene(self):
        """Gets the scene of this V1ExtraAlipayScan.  # noqa: E501


        :return: The scene of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._scene

    @scene.setter
    def scene(self, scene):
        """Sets the scene of this V1ExtraAlipayScan.


        :param scene: The scene of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._scene = scene

    @property
    def settle_info(self):
        """Gets the settle_info of this V1ExtraAlipayScan.  # noqa: E501


        :return: The settle_info of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: V1ExtraAlipaySettleInfo
        """
        return self._settle_info

    @settle_info.setter
    def settle_info(self, settle_info):
        """Sets the settle_info of this V1ExtraAlipayScan.


        :param settle_info: The settle_info of this V1ExtraAlipayScan.  # noqa: E501
        :type: V1ExtraAlipaySettleInfo
        """

        self._settle_info = settle_info

    @property
    def store_id(self):
        """Gets the store_id of this V1ExtraAlipayScan.  # noqa: E501


        :return: The store_id of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this V1ExtraAlipayScan.


        :param store_id: The store_id of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._store_id = store_id

    @property
    def store_name(self):
        """Gets the store_name of this V1ExtraAlipayScan.  # noqa: E501


        :return: The store_name of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """Sets the store_name of this V1ExtraAlipayScan.


        :param store_name: The store_name of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._store_name = store_name

    @property
    def sub_merchant(self):
        """Gets the sub_merchant of this V1ExtraAlipayScan.  # noqa: E501


        :return: The sub_merchant of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: V1ExtraAlipaySubMerchant
        """
        return self._sub_merchant

    @sub_merchant.setter
    def sub_merchant(self, sub_merchant):
        """Sets the sub_merchant of this V1ExtraAlipayScan.


        :param sub_merchant: The sub_merchant of this V1ExtraAlipayScan.  # noqa: E501
        :type: V1ExtraAlipaySubMerchant
        """

        self._sub_merchant = sub_merchant

    @property
    def terminal_id(self):
        """Gets the terminal_id of this V1ExtraAlipayScan.  # noqa: E501


        :return: The terminal_id of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this V1ExtraAlipayScan.


        :param terminal_id: The terminal_id of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._terminal_id = terminal_id

    @property
    def total_amount(self):
        """Gets the total_amount of this V1ExtraAlipayScan.  # noqa: E501


        :return: The total_amount of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: str
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this V1ExtraAlipayScan.


        :param total_amount: The total_amount of this V1ExtraAlipayScan.  # noqa: E501
        :type: str
        """

        self._total_amount = total_amount

    @property
    def undiscountable_amount(self):
        """Gets the undiscountable_amount of this V1ExtraAlipayScan.  # noqa: E501


        :return: The undiscountable_amount of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: float
        """
        return self._undiscountable_amount

    @undiscountable_amount.setter
    def undiscountable_amount(self, undiscountable_amount):
        """Sets the undiscountable_amount of this V1ExtraAlipayScan.


        :param undiscountable_amount: The undiscountable_amount of this V1ExtraAlipayScan.  # noqa: E501
        :type: float
        """

        self._undiscountable_amount = undiscountable_amount

    @property
    def voucher_detail_list(self):
        """Gets the voucher_detail_list of this V1ExtraAlipayScan.  # noqa: E501


        :return: The voucher_detail_list of this V1ExtraAlipayScan.  # noqa: E501
        :rtype: V1ExtraAlipayVoucherDetailList
        """
        return self._voucher_detail_list

    @voucher_detail_list.setter
    def voucher_detail_list(self, voucher_detail_list):
        """Sets the voucher_detail_list of this V1ExtraAlipayScan.


        :param voucher_detail_list: The voucher_detail_list of this V1ExtraAlipayScan.  # noqa: E501
        :type: V1ExtraAlipayVoucherDetailList
        """

        self._voucher_detail_list = voucher_detail_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ExtraAlipayScan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ExtraAlipayScan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ExtraAlipayScan):
            return True

        return self.to_dict() != other.to_dict()
