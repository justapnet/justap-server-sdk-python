# coding: utf-8

"""
    Justap API

    欢迎阅读 Justap Api 文档  Justap 是为移动端应用和PC端应用打造的下一代聚合支付SAAS服务平台，通过一个 SDK 即可快速的支持各种形式的应用，并且一次接口完成多个不同支付渠道的接入。平台除了支持服务商子商户模式，同时还对商家自有商户（即自己前往微信、支付宝等机构开户）提供了完整的支持。  感谢您的支持，我们将不断探索，为您提供更优质的服务！如需技术支持可前往商户中心提交工单，支持工程师会尽快与您取得联系！  # 文档说明 采用 REST 风格设计。所有接口请求地址都是可预期的以及面向资源的。使用规范的 HTTP 响应代码来表示请求结果的正确或错误信息。使用 HTTP 内置的特性，如 HTTP Authentication 和 HTTP 请求方法让接口易于理解。  ## HTTP 状态码 HTTP 状态码可以用于表明服务的状态。服务器返回的 HTTP 状态码遵循 [RFC 7231](http://tools.ietf.org/html/rfc7231#section-6) 和 [IANA Status Code Registry](http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 标准。  ## 认证 在调用 API 时，必须提供 API Key 作为每个请求的身份验证。你可以在管理平台内管理你的 API Key。API Key 是商户在系统中的身份标识，请安全存储，确保其不要被泄露。如需获取或更新 API Key ，也可以在商户中心内进行操作。 Api Key 在使用自定义的 HTTP Header 进行传递。  ``` X-Justap-Api-Key ```  API Key 分为 live 和 test 两种模式。分别对应真实交易环境和模拟测试交易环境并且可以实时切换。 测试模式下的 API Key 会模拟交易等请求，但是不会产生任何真实交易行为和费用，便于调试和接入。  **⚠️ 注意**：在使用 live 模式前，需要先前往 `商户中心 -> 应用设置 -> 开发参数` 开启 live 模式。  <SecurityDefinitions />  ## 请求类型 所有的 API 请求只支持 HTTPS 方式调用。  ## 路由参数 路由参数是指出现在 URL 路径中的可变变量。在本文档中，使用 `{}` 包裹的部分。 例如： `{charge_id}`，在实际使用是，需要将 `{charge_id}` 替换为实际值 `charge_8a8sdf888888`  ## MIME Type MIME 类型用于指示服务器返回的数据格式。服务器目前默认采用 `application/json`。  例如: ``` application/json ```  ## 错误 服务器使用 HTTP 状态码 (status code) 来表明一个 API 请求的成功或失败状态。返回 HTTP 2XX 表明 API 请求成功。返回 HTTP 4XX 表明在请求 API 时提供了错误信息，例如参数缺失、参数错误、支付渠道错误等。返回 HTTP 5XX 表明 API 请求时，服务器发生了错误。 在返回错误的状态码时，回同时返回一些错误信息提示出错原因。  具体的错误码我们正在整理当中。  ## 分页 所有的 Justap 资源都可以被 list API 方法支持，例如分页 charges 和 refunds。这些 list API 方法拥有相同的数据结构。Justap 是基于 cursor 的分页机制，使用参数 starting_after 来决定列表从何处开始，使用参数 ending_before 来决定列表从何处结束。  ## 参数说明 请求参数中包含的以下字段释义请参考：  - REQUIRED: 必填参数 - OPTIONAL: 可选参数，可以在请求当前接口时按需传入 - CONDITIONAL: 在某些条件下必传 - RESPONSE-ONLY: 标示该参数仅在接口返回参数中出现，调用 API 时无需传入  # 如何保证幂等性 如果发生请求超时或服务器内部错误，客户端可能会尝试重发请求。您可以在请求中设置 ClientToken 参数避免多次重试带来重复操作的问题。  ## 什么是幂等性 在数学计算或者计算机科学中，幂等性（idempotence）是指相同操作或资源在一次或多次请求中具有同样效果的作用。幂等性是在分布式系统设计中具有十分重要的地位。  ## 保证幂等性 通常情况下，客户端只需要在500（InternalErrorInternalError）或503（ServiceUnavailable）错误，或者无法获取响应结果时重试。充实时您可以从客户端生成一个参数值不超过64个的ASCII字符，并将值赋予 ClientToken，保证重试请求的幂等性。  ## ClientToken 详解 ClientToken参数的详细信息如下所示。  - ClientToken 是一个由客户端生成的唯一的、大小写敏感、不超过64个ASCII字符的字符串。例如，`ClientToken=123e4567-e89b-12d3-a456-426655440000`。 - 如果您提供了一个已经使用过的 ClientToken，但其他请求参数**有变化**，则服务器会返回 IdempotentParameterMismatch 的错误代码。 - 如果您提供了一个已经使用过的 ClientToken，且其他请求参数**不变**，则服务器会尝试返回 ClientToken 对应的记录。  ## API列表 以下为部分包含了 ClientToken 参数的API，供您参考。具体哪些API支持 ClientToken 参数请以各 API 文档为准，此处不一一列举。  - [申请退款接口](https://www.justap.cn/docs#operation/TradeService_Refunds)  # 签名 为保证安全，JUSTAP 所有接口均需要对请求进行签名。服务器收到请求后进行签名的验证。如果签名验证不通过，将会拒绝处理请求，并返回 401 Unauthorized。  签名算法：  ``` base64Encode(hamc-sha256(md5(请求 body + 请求时间戳 + 一次性随机字符串) + 一次性随机字符串)) ```  ## 准备 首先需要在 Justap 创建一个应用，商户需要生成一对 RSA 密钥对，并将公钥配置到 `商户中心 -> 开发配置`。 RSA 可以使用支付宝提供的 [密钥生成工具](https://opendocs.alipay.com/common/02kipl) 来生成。  商户在使用时，可以按照下述步骤生成请求的签名。   ## 算法描述: - 在请求发送前，取完整的**请求 body** - 生成一个随机的32位字符串，得到 **一次性随机字符串** - 获取当前时间的时间戳，得到 **请求时间戳** - 在请求字符串后面拼接上 **请求时间戳** 和 **一次性随机字符串**，得到 **待 Hash 字符串** - 对 **待 Hash 字符串** 计算 md5，得到 **待签名字符串** - **待签名字符串** 后面拼接上 一次性随机字符串，得到完整的 **待签名字符串** - 使用商户 RSA 私钥，对 **待签名字符串** 计算签名，并对 结果 进行 base64 编码，即可得到 **签名**  ## 设置HTTP头 Justap 要求请求通过 自定义头部 来传递签名。具体定义如下:  ``` X-Justap-Signature: 签名 X-Justap-Request-Time: 请求时间戳 X-Justap-Nonce: 一次性随机字符串 X-Justap-Body-Hash: 待签名字符串 ```  具体的签名算法实现，可参考我们提供的各语言 SDK。  # WebHooks   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@justap.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from justap_server_sdk_python.configuration import Configuration


class RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'buyer_logon_id': 'str',
        'buyer_user_id': 'str',
        'desc': 'str',
        'fund_change': 'str',
        'refund_detail_item_list': 'list[OpenApiRoyaltyDetailInfoPojoTradeFundBillItem]',
        'refund_fee': 'float',
        'royalty_scene': 'str',
        'royalty_type': 'str',
        'send_back_fee': 'str',
        'store_name': 'str',
        'trans_in': 'str',
        'trans_in_name': 'str',
        'trans_in_type': 'str',
        'trans_out': 'str',
        'trans_out_type': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'buyer_logon_id': 'buyer_logon_id',
        'buyer_user_id': 'buyer_user_id',
        'desc': 'desc',
        'fund_change': 'fund_change',
        'refund_detail_item_list': 'refund_detail_item_list',
        'refund_fee': 'refund_fee',
        'royalty_scene': 'royalty_scene',
        'royalty_type': 'royalty_type',
        'send_back_fee': 'send_back_fee',
        'store_name': 'store_name',
        'trans_in': 'trans_in',
        'trans_in_name': 'trans_in_name',
        'trans_in_type': 'trans_in_type',
        'trans_out': 'trans_out',
        'trans_out_type': 'trans_out_type'
    }

    def __init__(self, amount=None, buyer_logon_id=None, buyer_user_id=None, desc=None, fund_change=None, refund_detail_item_list=None, refund_fee=None, royalty_scene=None, royalty_type=None, send_back_fee=None, store_name=None, trans_in=None, trans_in_name=None, trans_in_type=None, trans_out=None, trans_out_type=None, _configuration=None):  # noqa: E501
        """RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._amount = None
        self._buyer_logon_id = None
        self._buyer_user_id = None
        self._desc = None
        self._fund_change = None
        self._refund_detail_item_list = None
        self._refund_fee = None
        self._royalty_scene = None
        self._royalty_type = None
        self._send_back_fee = None
        self._store_name = None
        self._trans_in = None
        self._trans_in_name = None
        self._trans_in_type = None
        self._trans_out = None
        self._trans_out_type = None
        self.discriminator = None

        self.amount = amount
        self.buyer_logon_id = buyer_logon_id
        self.buyer_user_id = buyer_user_id
        self.desc = desc
        self.fund_change = fund_change
        if refund_detail_item_list is not None:
            self.refund_detail_item_list = refund_detail_item_list
        self.refund_fee = refund_fee
        self.royalty_scene = royalty_scene
        self.royalty_type = royalty_type
        self.send_back_fee = send_back_fee
        self.store_name = store_name
        self.trans_in = trans_in
        self.trans_in_name = trans_in_name
        self.trans_in_type = trans_in_type
        self.trans_out = trans_out
        self.trans_out_type = trans_out_type

    @property
    def amount(self):
        """Gets the amount of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        分账的金额，单位为元  # noqa: E501

        :return: The amount of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        分账的金额，单位为元  # noqa: E501

        :param amount: The amount of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def buyer_logon_id(self):
        """Gets the buyer_logon_id of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        买家支付宝账号  # noqa: E501

        :return: The buyer_logon_id of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: str
        """
        return self._buyer_logon_id

    @buyer_logon_id.setter
    def buyer_logon_id(self, buyer_logon_id):
        """Sets the buyer_logon_id of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        买家支付宝账号  # noqa: E501

        :param buyer_logon_id: The buyer_logon_id of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and buyer_logon_id is None:
            raise ValueError("Invalid value for `buyer_logon_id`, must not be `None`")  # noqa: E501

        self._buyer_logon_id = buyer_logon_id

    @property
    def buyer_user_id(self):
        """Gets the buyer_user_id of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        买家在支付宝的用户id  # noqa: E501

        :return: The buyer_user_id of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: str
        """
        return self._buyer_user_id

    @buyer_user_id.setter
    def buyer_user_id(self, buyer_user_id):
        """Sets the buyer_user_id of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        买家在支付宝的用户id  # noqa: E501

        :param buyer_user_id: The buyer_user_id of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and buyer_user_id is None:
            raise ValueError("Invalid value for `buyer_user_id`, must not be `None`")  # noqa: E501

        self._buyer_user_id = buyer_user_id

    @property
    def desc(self):
        """Gets the desc of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        分账描述  # noqa: E501

        :return: The desc of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        分账描述  # noqa: E501

        :param desc: The desc of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")  # noqa: E501

        self._desc = desc

    @property
    def fund_change(self):
        """Gets the fund_change of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        分账变更消息  # noqa: E501

        :return: The fund_change of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: str
        """
        return self._fund_change

    @fund_change.setter
    def fund_change(self, fund_change):
        """Sets the fund_change of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        分账变更消息  # noqa: E501

        :param fund_change: The fund_change of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and fund_change is None:
            raise ValueError("Invalid value for `fund_change`, must not be `None`")  # noqa: E501

        self._fund_change = fund_change

    @property
    def refund_detail_item_list(self):
        """Gets the refund_detail_item_list of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        退款使用的资金渠道  # noqa: E501

        :return: The refund_detail_item_list of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: list[OpenApiRoyaltyDetailInfoPojoTradeFundBillItem]
        """
        return self._refund_detail_item_list

    @refund_detail_item_list.setter
    def refund_detail_item_list(self, refund_detail_item_list):
        """Sets the refund_detail_item_list of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        退款使用的资金渠道  # noqa: E501

        :param refund_detail_item_list: The refund_detail_item_list of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: list[OpenApiRoyaltyDetailInfoPojoTradeFundBillItem]
        """

        self._refund_detail_item_list = refund_detail_item_list

    @property
    def refund_fee(self):
        """Gets the refund_fee of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        总退款金额  # noqa: E501

        :return: The refund_fee of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: float
        """
        return self._refund_fee

    @refund_fee.setter
    def refund_fee(self, refund_fee):
        """Sets the refund_fee of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        总退款金额  # noqa: E501

        :param refund_fee: The refund_fee of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and refund_fee is None:
            raise ValueError("Invalid value for `refund_fee`, must not be `None`")  # noqa: E501

        self._refund_fee = refund_fee

    @property
    def royalty_scene(self):
        """Gets the royalty_scene of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        可选值：达人佣金、平台服务费、技术服务费、其他  # noqa: E501

        :return: The royalty_scene of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: str
        """
        return self._royalty_scene

    @royalty_scene.setter
    def royalty_scene(self, royalty_scene):
        """Sets the royalty_scene of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        可选值：达人佣金、平台服务费、技术服务费、其他  # noqa: E501

        :param royalty_scene: The royalty_scene of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and royalty_scene is None:
            raise ValueError("Invalid value for `royalty_scene`, must not be `None`")  # noqa: E501

        self._royalty_scene = royalty_scene

    @property
    def royalty_type(self):
        """Gets the royalty_type of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        分账类型  # noqa: E501

        :return: The royalty_type of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: str
        """
        return self._royalty_type

    @royalty_type.setter
    def royalty_type(self, royalty_type):
        """Sets the royalty_type of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        分账类型  # noqa: E501

        :param royalty_type: The royalty_type of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and royalty_type is None:
            raise ValueError("Invalid value for `royalty_type`, must not be `None`")  # noqa: E501

        self._royalty_type = royalty_type

    @property
    def send_back_fee(self):
        """Gets the send_back_fee of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        买家实际退款金额  # noqa: E501

        :return: The send_back_fee of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: str
        """
        return self._send_back_fee

    @send_back_fee.setter
    def send_back_fee(self, send_back_fee):
        """Sets the send_back_fee of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        买家实际退款金额  # noqa: E501

        :param send_back_fee: The send_back_fee of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and send_back_fee is None:
            raise ValueError("Invalid value for `send_back_fee`, must not be `None`")  # noqa: E501

        self._send_back_fee = send_back_fee

    @property
    def store_name(self):
        """Gets the store_name of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        交易场景  # noqa: E501

        :return: The store_name of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """Sets the store_name of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        交易场景  # noqa: E501

        :param store_name: The store_name of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and store_name is None:
            raise ValueError("Invalid value for `store_name`, must not be `None`")  # noqa: E501

        self._store_name = store_name

    @property
    def trans_in(self):
        """Gets the trans_in of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        收入方账户  # noqa: E501

        :return: The trans_in of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: str
        """
        return self._trans_in

    @trans_in.setter
    def trans_in(self, trans_in):
        """Sets the trans_in of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        收入方账户  # noqa: E501

        :param trans_in: The trans_in of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and trans_in is None:
            raise ValueError("Invalid value for `trans_in`, must not be `None`")  # noqa: E501

        self._trans_in = trans_in

    @property
    def trans_in_name(self):
        """Gets the trans_in_name of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        分账收款方姓名  # noqa: E501

        :return: The trans_in_name of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: str
        """
        return self._trans_in_name

    @trans_in_name.setter
    def trans_in_name(self, trans_in_name):
        """Sets the trans_in_name of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        分账收款方姓名  # noqa: E501

        :param trans_in_name: The trans_in_name of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and trans_in_name is None:
            raise ValueError("Invalid value for `trans_in_name`, must not be `None`")  # noqa: E501

        self._trans_in_name = trans_in_name

    @property
    def trans_in_type(self):
        """Gets the trans_in_type of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        收入方账户类型  # noqa: E501

        :return: The trans_in_type of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: str
        """
        return self._trans_in_type

    @trans_in_type.setter
    def trans_in_type(self, trans_in_type):
        """Sets the trans_in_type of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        收入方账户类型  # noqa: E501

        :param trans_in_type: The trans_in_type of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and trans_in_type is None:
            raise ValueError("Invalid value for `trans_in_type`, must not be `None`")  # noqa: E501

        self._trans_in_type = trans_in_type

    @property
    def trans_out(self):
        """Gets the trans_out of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        支出方账户  # noqa: E501

        :return: The trans_out of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: str
        """
        return self._trans_out

    @trans_out.setter
    def trans_out(self, trans_out):
        """Sets the trans_out of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        支出方账户  # noqa: E501

        :param trans_out: The trans_out of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and trans_out is None:
            raise ValueError("Invalid value for `trans_out`, must not be `None`")  # noqa: E501

        self._trans_out = trans_out

    @property
    def trans_out_type(self):
        """Gets the trans_out_type of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501

        支出方账户类型  # noqa: E501

        :return: The trans_out_type of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :rtype: str
        """
        return self._trans_out_type

    @trans_out_type.setter
    def trans_out_type(self, trans_out_type):
        """Sets the trans_out_type of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.

        支出方账户类型  # noqa: E501

        :param trans_out_type: The trans_out_type of this RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and trans_out_type is None:
            raise ValueError("Invalid value for `trans_out_type`, must not be `None`")  # noqa: E501

        self._trans_out_type = trans_out_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RefundExtraAlipayOpenApiRoyaltyDetailInfoPojo):
            return True

        return self.to_dict() != other.to_dict()
