# coding: utf-8

"""
    Justap API

    欢迎阅读 Justap Api 文档  Justap 是为移动端应用和PC端应用打造的下一代聚合支付SAAS服务平台，通过一个 SDK 即可快速的支持各种形式的应用，并且一次接口完成多个不同支付渠道的接入。平台除了支持服务商子商户模式，同时还对商家自有商户（即自己前往微信、支付宝等机构开户）提供了完整的支持。  感谢您的支持，我们将不断探索，为您提供更优质的服务！如需技术支持可前往商户中心提交工单，支持工程师会尽快与您取得联系！  # 文档说明 采用 REST 风格设计。所有接口请求地址都是可预期的以及面向资源的。使用规范的 HTTP 响应代码来表示请求结果的正确或错误信息。使用 HTTP 内置的特性，如 HTTP Authentication 和 HTTP 请求方法让接口易于理解。  ## HTTP 状态码 HTTP 状态码可以用于表明服务的状态。服务器返回的 HTTP 状态码遵循 [RFC 7231](http://tools.ietf.org/html/rfc7231#section-6) 和 [IANA Status Code Registry](http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 标准。  ## 认证 在调用 API 时，必须提供 API Key 作为每个请求的身份验证。你可以在管理平台内管理你的 API Key。API Key 是商户在系统中的身份标识，请安全存储，确保其不要被泄露。如需获取或更新 API Key ，也可以在商户中心内进行操作。 Api Key 在使用自定义的 HTTP Header 进行传递。  ``` X-Justap-Api-Key ```  API Key 分为 live 和 test 两种模式。分别对应真实交易环境和模拟测试交易环境并且可以实时切换。 测试模式下的 API Key 会模拟交易等请求，但是不会产生任何真实交易行为和费用，便于调试和接入。  **⚠️ 注意**：在使用 live 模式前，需要先前往 `商户中心 -> 应用设置 -> 开发参数` 开启 live 模式。  <SecurityDefinitions />  ## 请求类型 所有的 API 请求只支持 HTTPS 方式调用。  ## 路由参数 路由参数是指出现在 URL 路径中的可变变量。在本文档中，使用 `{}` 包裹的部分。 例如： `{charge_id}`，在实际使用是，需要将 `{charge_id}` 替换为实际值 `charge_8a8sdf888888`  ## MIME Type MIME 类型用于指示服务器返回的数据格式。服务器目前默认采用 `application/json`。  例如: ``` application/json ```  ## 错误 服务器使用 HTTP 状态码 (status code) 来表明一个 API 请求的成功或失败状态。返回 HTTP 2XX 表明 API 请求成功。返回 HTTP 4XX 表明在请求 API 时提供了错误信息，例如参数缺失、参数错误、支付渠道错误等。返回 HTTP 5XX 表明 API 请求时，服务器发生了错误。 在返回错误的状态码时，回同时返回一些错误信息提示出错原因。  具体的错误码我们正在整理当中。  ## 分页 所有的 Justap 资源都可以被 list API 方法支持，例如分页 charges 和 refunds。这些 list API 方法拥有相同的数据结构。Justap 是基于 cursor 的分页机制，使用参数 starting_after 来决定列表从何处开始，使用参数 ending_before 来决定列表从何处结束。  ## 参数说明 请求参数中包含的以下字段释义请参考：  - REQUIRED: 必填参数 - OPTIONAL: 可选参数，可以在请求当前接口时按需传入 - CONDITIONAL: 在某些条件下必传 - RESPONSE-ONLY: 标示该参数仅在接口返回参数中出现，调用 API 时无需传入  # 如何保证幂等性 如果发生请求超时或服务器内部错误，客户端可能会尝试重发请求。您可以在请求中设置 ClientToken 参数避免多次重试带来重复操作的问题。  ## 什么是幂等性 在数学计算或者计算机科学中，幂等性（idempotence）是指相同操作或资源在一次或多次请求中具有同样效果的作用。幂等性是在分布式系统设计中具有十分重要的地位。  ## 保证幂等性 通常情况下，客户端只需要在500（InternalErrorInternalError）或503（ServiceUnavailable）错误，或者无法获取响应结果时重试。充实时您可以从客户端生成一个参数值不超过64个的ASCII字符，并将值赋予 ClientToken，保证重试请求的幂等性。  ## ClientToken 详解 ClientToken参数的详细信息如下所示。  - ClientToken 是一个由客户端生成的唯一的、大小写敏感、不超过64个ASCII字符的字符串。例如，`ClientToken=123e4567-e89b-12d3-a456-426655440000`。 - 如果您提供了一个已经使用过的 ClientToken，但其他请求参数**有变化**，则服务器会返回 IdempotentParameterMismatch 的错误代码。 - 如果您提供了一个已经使用过的 ClientToken，且其他请求参数**不变**，则服务器会尝试返回 ClientToken 对应的记录。  ## API列表 以下为部分包含了 ClientToken 参数的API，供您参考。具体哪些API支持 ClientToken 参数请以各 API 文档为准，此处不一一列举。  - [申请退款接口](https://www.justap.cn/docs#operation/TradeService_Refunds)  # 签名 为保证安全，JUSTAP 所有接口均需要对请求进行签名。服务器收到请求后进行签名的验证。如果签名验证不通过，将会拒绝处理请求，并返回 401 Unauthorized。  签名算法：  ``` base64Encode(hamc-sha256(md5(请求 body + 请求时间戳 + 一次性随机字符串) + 一次性随机字符串)) ```  ## 准备 首先需要在 Justap 创建一个应用，商户需要生成一对 RSA 密钥对，并将公钥配置到 `商户中心 -> 开发配置`。 RSA 可以使用支付宝提供的 [密钥生成工具](https://opendocs.alipay.com/common/02kipl) 来生成。  商户在使用时，可以按照下述步骤生成请求的签名。   ## 算法描述: - 在请求发送前，取完整的**请求 body** - 生成一个随机的32位字符串，得到 **一次性随机字符串** - 获取当前时间的时间戳，得到 **请求时间戳** - 在请求字符串后面拼接上 **请求时间戳** 和 **一次性随机字符串**，得到 **待 Hash 字符串** - 对 **待 Hash 字符串** 计算 md5，得到 **待签名字符串** - **待签名字符串** 后面拼接上 一次性随机字符串，得到完整的 **待签名字符串** - 使用商户 RSA 私钥，对 **待签名字符串** 计算签名，并对 结果 进行 base64 编码，即可得到 **签名**  ## 设置HTTP头 Justap 要求请求通过 自定义头部 来传递签名。具体定义如下:  ``` X-Justap-Signature: 签名 X-Justap-Request-Time: 请求时间戳 X-Justap-Nonce: 一次性随机字符串 X-Justap-Body-Hash: 待签名字符串 ```  具体的签名算法实现，可参考我们提供的各语言 SDK。  # WebHooks   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@justap.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from justap_server_sdk_python.configuration import Configuration


class V1ExtraWechatpayScan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attach': 'str',
        'auth_code': 'str',
        'bank_type': 'str',
        'cash_fee': 'str',
        'cash_fee_type': 'str',
        'detail': 'V1ExtraWechatpayDetail',
        'fee_type': 'str',
        'goods_tag': 'str',
        'is_subscribe': 'bool',
        'payer': 'V1ExtraWechatpayPayer',
        'scene_info': 'V1ExtraWechatpaySceneInfo',
        'settle_info': 'V1ExtraWechatpaySettleInfo',
        'settlement_total_fee': 'float',
        'spbill_create_ip': 'str',
        'sub_is_subscribe': 'bool',
        'sub_openid': 'str',
        'time_end': 'str',
        'time_expire': 'str',
        'time_start': 'str'
    }

    attribute_map = {
        'attach': 'attach',
        'auth_code': 'auth_code',
        'bank_type': 'bank_type',
        'cash_fee': 'cash_fee',
        'cash_fee_type': 'cash_fee_type',
        'detail': 'detail',
        'fee_type': 'fee_type',
        'goods_tag': 'goods_tag',
        'is_subscribe': 'is_subscribe',
        'payer': 'payer',
        'scene_info': 'scene_info',
        'settle_info': 'settle_info',
        'settlement_total_fee': 'settlement_total_fee',
        'spbill_create_ip': 'spbill_create_ip',
        'sub_is_subscribe': 'sub_is_subscribe',
        'sub_openid': 'sub_openid',
        'time_end': 'time_end',
        'time_expire': 'time_expire',
        'time_start': 'time_start'
    }

    def __init__(self, attach=None, auth_code=None, bank_type=None, cash_fee=None, cash_fee_type=None, detail=None, fee_type=None, goods_tag=None, is_subscribe=False, payer=None, scene_info=None, settle_info=None, settlement_total_fee=None, spbill_create_ip=None, sub_is_subscribe=False, sub_openid=None, time_end=None, time_expire=None, time_start=None, _configuration=None):  # noqa: E501
        """V1ExtraWechatpayScan - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attach = None
        self._auth_code = None
        self._bank_type = None
        self._cash_fee = None
        self._cash_fee_type = None
        self._detail = None
        self._fee_type = None
        self._goods_tag = None
        self._is_subscribe = None
        self._payer = None
        self._scene_info = None
        self._settle_info = None
        self._settlement_total_fee = None
        self._spbill_create_ip = None
        self._sub_is_subscribe = None
        self._sub_openid = None
        self._time_end = None
        self._time_expire = None
        self._time_start = None
        self.discriminator = None

        if attach is not None:
            self.attach = attach
        if auth_code is not None:
            self.auth_code = auth_code
        if bank_type is not None:
            self.bank_type = bank_type
        if cash_fee is not None:
            self.cash_fee = cash_fee
        if cash_fee_type is not None:
            self.cash_fee_type = cash_fee_type
        if detail is not None:
            self.detail = detail
        if fee_type is not None:
            self.fee_type = fee_type
        if goods_tag is not None:
            self.goods_tag = goods_tag
        if is_subscribe is not None:
            self.is_subscribe = is_subscribe
        if payer is not None:
            self.payer = payer
        if scene_info is not None:
            self.scene_info = scene_info
        if settle_info is not None:
            self.settle_info = settle_info
        if settlement_total_fee is not None:
            self.settlement_total_fee = settlement_total_fee
        if spbill_create_ip is not None:
            self.spbill_create_ip = spbill_create_ip
        if sub_is_subscribe is not None:
            self.sub_is_subscribe = sub_is_subscribe
        if sub_openid is not None:
            self.sub_openid = sub_openid
        if time_end is not None:
            self.time_end = time_end
        if time_expire is not None:
            self.time_expire = time_expire
        if time_start is not None:
            self.time_start = time_start

    @property
    def attach(self):
        """Gets the attach of this V1ExtraWechatpayScan.  # noqa: E501

        元数据  # noqa: E501

        :return: The attach of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: str
        """
        return self._attach

    @attach.setter
    def attach(self, attach):
        """Sets the attach of this V1ExtraWechatpayScan.

        元数据  # noqa: E501

        :param attach: The attach of this V1ExtraWechatpayScan.  # noqa: E501
        :type: str
        """

        self._attach = attach

    @property
    def auth_code(self):
        """Gets the auth_code of this V1ExtraWechatpayScan.  # noqa: E501

        授权码  # noqa: E501

        :return: The auth_code of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this V1ExtraWechatpayScan.

        授权码  # noqa: E501

        :param auth_code: The auth_code of this V1ExtraWechatpayScan.  # noqa: E501
        :type: str
        """

        self._auth_code = auth_code

    @property
    def bank_type(self):
        """Gets the bank_type of this V1ExtraWechatpayScan.  # noqa: E501

        付款银行  # noqa: E501

        :return: The bank_type of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: str
        """
        return self._bank_type

    @bank_type.setter
    def bank_type(self, bank_type):
        """Sets the bank_type of this V1ExtraWechatpayScan.

        付款银行  # noqa: E501

        :param bank_type: The bank_type of this V1ExtraWechatpayScan.  # noqa: E501
        :type: str
        """

        self._bank_type = bank_type

    @property
    def cash_fee(self):
        """Gets the cash_fee of this V1ExtraWechatpayScan.  # noqa: E501

        现金支付金额  # noqa: E501

        :return: The cash_fee of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: str
        """
        return self._cash_fee

    @cash_fee.setter
    def cash_fee(self, cash_fee):
        """Sets the cash_fee of this V1ExtraWechatpayScan.

        现金支付金额  # noqa: E501

        :param cash_fee: The cash_fee of this V1ExtraWechatpayScan.  # noqa: E501
        :type: str
        """

        self._cash_fee = cash_fee

    @property
    def cash_fee_type(self):
        """Gets the cash_fee_type of this V1ExtraWechatpayScan.  # noqa: E501

        现金支付币种  # noqa: E501

        :return: The cash_fee_type of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: str
        """
        return self._cash_fee_type

    @cash_fee_type.setter
    def cash_fee_type(self, cash_fee_type):
        """Sets the cash_fee_type of this V1ExtraWechatpayScan.

        现金支付币种  # noqa: E501

        :param cash_fee_type: The cash_fee_type of this V1ExtraWechatpayScan.  # noqa: E501
        :type: str
        """

        self._cash_fee_type = cash_fee_type

    @property
    def detail(self):
        """Gets the detail of this V1ExtraWechatpayScan.  # noqa: E501

        商品详情  # noqa: E501

        :return: The detail of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: V1ExtraWechatpayDetail
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this V1ExtraWechatpayScan.

        商品详情  # noqa: E501

        :param detail: The detail of this V1ExtraWechatpayScan.  # noqa: E501
        :type: V1ExtraWechatpayDetail
        """

        self._detail = detail

    @property
    def fee_type(self):
        """Gets the fee_type of this V1ExtraWechatpayScan.  # noqa: E501

        货币种类  # noqa: E501

        :return: The fee_type of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: str
        """
        return self._fee_type

    @fee_type.setter
    def fee_type(self, fee_type):
        """Sets the fee_type of this V1ExtraWechatpayScan.

        货币种类  # noqa: E501

        :param fee_type: The fee_type of this V1ExtraWechatpayScan.  # noqa: E501
        :type: str
        """

        self._fee_type = fee_type

    @property
    def goods_tag(self):
        """Gets the goods_tag of this V1ExtraWechatpayScan.  # noqa: E501

        订单优惠标记  # noqa: E501

        :return: The goods_tag of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: str
        """
        return self._goods_tag

    @goods_tag.setter
    def goods_tag(self, goods_tag):
        """Sets the goods_tag of this V1ExtraWechatpayScan.

        订单优惠标记  # noqa: E501

        :param goods_tag: The goods_tag of this V1ExtraWechatpayScan.  # noqa: E501
        :type: str
        """

        self._goods_tag = goods_tag

    @property
    def is_subscribe(self):
        """Gets the is_subscribe of this V1ExtraWechatpayScan.  # noqa: E501

        是否关注公众账号  # noqa: E501

        :return: The is_subscribe of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: bool
        """
        return self._is_subscribe

    @is_subscribe.setter
    def is_subscribe(self, is_subscribe):
        """Sets the is_subscribe of this V1ExtraWechatpayScan.

        是否关注公众账号  # noqa: E501

        :param is_subscribe: The is_subscribe of this V1ExtraWechatpayScan.  # noqa: E501
        :type: bool
        """

        self._is_subscribe = is_subscribe

    @property
    def payer(self):
        """Gets the payer of this V1ExtraWechatpayScan.  # noqa: E501

        付款人信息  # noqa: E501

        :return: The payer of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: V1ExtraWechatpayPayer
        """
        return self._payer

    @payer.setter
    def payer(self, payer):
        """Sets the payer of this V1ExtraWechatpayScan.

        付款人信息  # noqa: E501

        :param payer: The payer of this V1ExtraWechatpayScan.  # noqa: E501
        :type: V1ExtraWechatpayPayer
        """

        self._payer = payer

    @property
    def scene_info(self):
        """Gets the scene_info of this V1ExtraWechatpayScan.  # noqa: E501

        场景信息  # noqa: E501

        :return: The scene_info of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: V1ExtraWechatpaySceneInfo
        """
        return self._scene_info

    @scene_info.setter
    def scene_info(self, scene_info):
        """Sets the scene_info of this V1ExtraWechatpayScan.

        场景信息  # noqa: E501

        :param scene_info: The scene_info of this V1ExtraWechatpayScan.  # noqa: E501
        :type: V1ExtraWechatpaySceneInfo
        """

        self._scene_info = scene_info

    @property
    def settle_info(self):
        """Gets the settle_info of this V1ExtraWechatpayScan.  # noqa: E501

        结算信息  # noqa: E501

        :return: The settle_info of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: V1ExtraWechatpaySettleInfo
        """
        return self._settle_info

    @settle_info.setter
    def settle_info(self, settle_info):
        """Sets the settle_info of this V1ExtraWechatpayScan.

        结算信息  # noqa: E501

        :param settle_info: The settle_info of this V1ExtraWechatpayScan.  # noqa: E501
        :type: V1ExtraWechatpaySettleInfo
        """

        self._settle_info = settle_info

    @property
    def settlement_total_fee(self):
        """Gets the settlement_total_fee of this V1ExtraWechatpayScan.  # noqa: E501

        应结订单金额  # noqa: E501

        :return: The settlement_total_fee of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: float
        """
        return self._settlement_total_fee

    @settlement_total_fee.setter
    def settlement_total_fee(self, settlement_total_fee):
        """Sets the settlement_total_fee of this V1ExtraWechatpayScan.

        应结订单金额  # noqa: E501

        :param settlement_total_fee: The settlement_total_fee of this V1ExtraWechatpayScan.  # noqa: E501
        :type: float
        """

        self._settlement_total_fee = settlement_total_fee

    @property
    def spbill_create_ip(self):
        """Gets the spbill_create_ip of this V1ExtraWechatpayScan.  # noqa: E501

        终端IP  # noqa: E501

        :return: The spbill_create_ip of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: str
        """
        return self._spbill_create_ip

    @spbill_create_ip.setter
    def spbill_create_ip(self, spbill_create_ip):
        """Sets the spbill_create_ip of this V1ExtraWechatpayScan.

        终端IP  # noqa: E501

        :param spbill_create_ip: The spbill_create_ip of this V1ExtraWechatpayScan.  # noqa: E501
        :type: str
        """

        self._spbill_create_ip = spbill_create_ip

    @property
    def sub_is_subscribe(self):
        """Gets the sub_is_subscribe of this V1ExtraWechatpayScan.  # noqa: E501

        子商户是否关注公众账号  # noqa: E501

        :return: The sub_is_subscribe of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: bool
        """
        return self._sub_is_subscribe

    @sub_is_subscribe.setter
    def sub_is_subscribe(self, sub_is_subscribe):
        """Sets the sub_is_subscribe of this V1ExtraWechatpayScan.

        子商户是否关注公众账号  # noqa: E501

        :param sub_is_subscribe: The sub_is_subscribe of this V1ExtraWechatpayScan.  # noqa: E501
        :type: bool
        """

        self._sub_is_subscribe = sub_is_subscribe

    @property
    def sub_openid(self):
        """Gets the sub_openid of this V1ExtraWechatpayScan.  # noqa: E501

        子商户openid  # noqa: E501

        :return: The sub_openid of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: str
        """
        return self._sub_openid

    @sub_openid.setter
    def sub_openid(self, sub_openid):
        """Sets the sub_openid of this V1ExtraWechatpayScan.

        子商户openid  # noqa: E501

        :param sub_openid: The sub_openid of this V1ExtraWechatpayScan.  # noqa: E501
        :type: str
        """

        self._sub_openid = sub_openid

    @property
    def time_end(self):
        """Gets the time_end of this V1ExtraWechatpayScan.  # noqa: E501

        支付完成时间  # noqa: E501

        :return: The time_end of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: str
        """
        return self._time_end

    @time_end.setter
    def time_end(self, time_end):
        """Sets the time_end of this V1ExtraWechatpayScan.

        支付完成时间  # noqa: E501

        :param time_end: The time_end of this V1ExtraWechatpayScan.  # noqa: E501
        :type: str
        """

        self._time_end = time_end

    @property
    def time_expire(self):
        """Gets the time_expire of this V1ExtraWechatpayScan.  # noqa: E501

        交易结束时间  # noqa: E501

        :return: The time_expire of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: str
        """
        return self._time_expire

    @time_expire.setter
    def time_expire(self, time_expire):
        """Sets the time_expire of this V1ExtraWechatpayScan.

        交易结束时间  # noqa: E501

        :param time_expire: The time_expire of this V1ExtraWechatpayScan.  # noqa: E501
        :type: str
        """

        self._time_expire = time_expire

    @property
    def time_start(self):
        """Gets the time_start of this V1ExtraWechatpayScan.  # noqa: E501

        交易起始时间  # noqa: E501

        :return: The time_start of this V1ExtraWechatpayScan.  # noqa: E501
        :rtype: str
        """
        return self._time_start

    @time_start.setter
    def time_start(self, time_start):
        """Sets the time_start of this V1ExtraWechatpayScan.

        交易起始时间  # noqa: E501

        :param time_start: The time_start of this V1ExtraWechatpayScan.  # noqa: E501
        :type: str
        """

        self._time_start = time_start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ExtraWechatpayScan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ExtraWechatpayScan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ExtraWechatpayScan):
            return True

        return self.to_dict() != other.to_dict()
