# coding: utf-8

"""
    Justap API

    欢迎阅读 Justap Api 文档  Justap 是为移动端应用和PC端应用打造的下一代聚合支付SAAS服务平台，通过一个 SDK 即可快速的支持各种形式的应用，并且一次接口完成多个不同支付渠道的接入。平台除了支持服务商子商户模式，同时还对商家自有商户（即自己前往微信、支付宝等机构开户）提供了完整的支持。  感谢您的支持，我们将不断探索，为您提供更优质的服务！如需技术支持可前往商户中心提交工单，支持工程师会尽快与您取得联系！  # 文档说明 采用 REST 风格设计。所有接口请求地址都是可预期的以及面向资源的。使用规范的 HTTP 响应代码来表示请求结果的正确或错误信息。使用 HTTP 内置的特性，如 HTTP Authentication 和 HTTP 请求方法让接口易于理解。  ## HTTP 状态码 HTTP 状态码可以用于表明服务的状态。服务器返回的 HTTP 状态码遵循 [RFC 7231](http://tools.ietf.org/html/rfc7231#section-6) 和 [IANA Status Code Registry](http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml) 标准。  ## 认证 在调用 API 时，必须提供 API Key 作为每个请求的身份验证。你可以在管理平台内管理你的 API Key。API Key 是商户在系统中的身份标识，请安全存储，确保其不要被泄露。如需获取或更新 API Key ，也可以在商户中心内进行操作。 Api Key 在使用自定义的 HTTP Header 进行传递。  ``` X-Justap-Api-Key ```  API Key 分为 live 和 test 两种模式。分别对应真实交易环境和模拟测试交易环境并且可以实时切换。 测试模式下的 API Key 会模拟交易等请求，但是不会产生任何真实交易行为和费用，便于调试和接入。  **⚠️ 注意**：在使用 live 模式前，需要先前往 `商户中心 -> 应用设置 -> 开发参数` 开启 live 模式。  <SecurityDefinitions />  ## 请求类型 所有的 API 请求只支持 HTTPS 方式调用。  ## 路由参数 路由参数是指出现在 URL 路径中的可变变量。在本文档中，使用 `{}` 包裹的部分。 例如： `{charge_id}`，在实际使用是，需要将 `{charge_id}` 替换为实际值 `charge_8a8sdf888888`  ## MIME Type MIME 类型用于指示服务器返回的数据格式。服务器目前默认采用 `application/json`。  例如: ``` application/json ```  ## 错误 服务器使用 HTTP 状态码 (status code) 来表明一个 API 请求的成功或失败状态。返回 HTTP 2XX 表明 API 请求成功。返回 HTTP 4XX 表明在请求 API 时提供了错误信息，例如参数缺失、参数错误、支付渠道错误等。返回 HTTP 5XX 表明 API 请求时，服务器发生了错误。 在返回错误的状态码时，回同时返回一些错误信息提示出错原因。  具体的错误码我们正在整理当中。  ## 分页 所有的 Justap 资源都可以被 list API 方法支持，例如分页 charges 和 refunds。这些 list API 方法拥有相同的数据结构。Justap 是基于 cursor 的分页机制，使用参数 starting_after 来决定列表从何处开始，使用参数 ending_before 来决定列表从何处结束。  ## 参数说明 请求参数中包含的以下字段释义请参考：  - REQUIRED: 必填参数 - OPTIONAL: 可选参数，可以在请求当前接口时按需传入 - CONDITIONAL: 在某些条件下必传 - RESPONSE-ONLY: 标示该参数仅在接口返回参数中出现，调用 API 时无需传入  # 如何保证幂等性 如果发生请求超时或服务器内部错误，客户端可能会尝试重发请求。您可以在请求中设置 ClientToken 参数避免多次重试带来重复操作的问题。  ## 什么是幂等性 在数学计算或者计算机科学中，幂等性（idempotence）是指相同操作或资源在一次或多次请求中具有同样效果的作用。幂等性是在分布式系统设计中具有十分重要的地位。  ## 保证幂等性 通常情况下，客户端只需要在500（InternalErrorInternalError）或503（ServiceUnavailable）错误，或者无法获取响应结果时重试。充实时您可以从客户端生成一个参数值不超过64个的ASCII字符，并将值赋予 ClientToken，保证重试请求的幂等性。  ## ClientToken 详解 ClientToken参数的详细信息如下所示。  - ClientToken 是一个由客户端生成的唯一的、大小写敏感、不超过64个ASCII字符的字符串。例如，`ClientToken=123e4567-e89b-12d3-a456-426655440000`。 - 如果您提供了一个已经使用过的 ClientToken，但其他请求参数**有变化**，则服务器会返回 IdempotentParameterMismatch 的错误代码。 - 如果您提供了一个已经使用过的 ClientToken，且其他请求参数**不变**，则服务器会尝试返回 ClientToken 对应的记录。  ## API列表 以下为部分包含了 ClientToken 参数的API，供您参考。具体哪些API支持 ClientToken 参数请以各 API 文档为准，此处不一一列举。  - [申请退款接口](https://www.justap.cn/docs#operation/TradeService_Refunds)  # 签名 为保证安全，JUSTAP 所有接口均需要对请求进行签名。服务器收到请求后进行签名的验证。如果签名验证不通过，将会拒绝处理请求，并返回 401 Unauthorized。  签名算法：  ``` base64Encode(hamc-sha256(md5(请求 body + 请求时间戳 + 一次性随机字符串) + 一次性随机字符串)) ```  ## 准备 首先需要在 Justap 创建一个应用，商户需要生成一对 RSA 密钥对，并将公钥配置到 `商户中心 -> 开发配置`。 RSA 可以使用支付宝提供的 [密钥生成工具](https://opendocs.alipay.com/common/02kipl) 来生成。  商户在使用时，可以按照下述步骤生成请求的签名。   ## 算法描述: - 在请求发送前，取完整的**请求 body** - 生成一个随机的32位字符串，得到 **一次性随机字符串** - 获取当前时间的时间戳，得到 **请求时间戳** - 在请求字符串后面拼接上 **请求时间戳** 和 **一次性随机字符串**，得到 **待 Hash 字符串** - 对 **待 Hash 字符串** 转换为 utf8 编码并计算 md5，得到 **待签名字符串** - **待签名字符串** 后面拼接上 一次性随机字符串，得到完整的 **待签名字符串** - 使用商户 RSA 私钥，对 **待签名字符串** 计算签名，并对 结果 进行 base64 编码，即可得到 **签名**  ## 设置HTTP头 Justap 要求请求通过 自定义头部 来传递签名。具体定义如下:  ``` X-Justap-Signature: 签名 X-Justap-Request-Time: 请求时间戳 X-Justap-Nonce: 一次性随机字符串 X-Justap-Body-Hash: 待签名字符串 ```  具体的签名算法实现，可参考我们提供的各语言 SDK。  # WebHooks   # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@justap.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from justap_server_sdk_python.configuration import Configuration


class V1ExtraAlipayApp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit_agreement_id': 'str',
        'credit_biz_order_id': 'str',
        'credit_pay_mode': 'str',
        'disable_pay_channels': 'str',
        'enable_pay_channels': 'str',
        'ext_user_info': 'V1ExtraAlipayExtUserInfo',
        'extend_params': 'V1ExtraAlipayExtendParams',
        'goods_detail': 'list[V1ExtraAlipayGoodsDetail]',
        'goods_type': 'str',
        'merchant_trade_id': 'str',
        'pay_param': 'str',
        'product_code': 'str',
        'seller_id': 'str',
        'store_id': 'str'
    }

    attribute_map = {
        'credit_agreement_id': 'credit_agreement_id',
        'credit_biz_order_id': 'credit_biz_order_id',
        'credit_pay_mode': 'credit_pay_mode',
        'disable_pay_channels': 'disable_pay_channels',
        'enable_pay_channels': 'enable_pay_channels',
        'ext_user_info': 'ext_user_info',
        'extend_params': 'extend_params',
        'goods_detail': 'goods_detail',
        'goods_type': 'goods_type',
        'merchant_trade_id': 'merchant_trade_id',
        'pay_param': 'pay_param',
        'product_code': 'product_code',
        'seller_id': 'seller_id',
        'store_id': 'store_id'
    }

    def __init__(self, credit_agreement_id=None, credit_biz_order_id=None, credit_pay_mode=None, disable_pay_channels=None, enable_pay_channels=None, ext_user_info=None, extend_params=None, goods_detail=None, goods_type=None, merchant_trade_id=None, pay_param=None, product_code=None, seller_id=None, store_id=None, _configuration=None):  # noqa: E501
        """V1ExtraAlipayApp - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._credit_agreement_id = None
        self._credit_biz_order_id = None
        self._credit_pay_mode = None
        self._disable_pay_channels = None
        self._enable_pay_channels = None
        self._ext_user_info = None
        self._extend_params = None
        self._goods_detail = None
        self._goods_type = None
        self._merchant_trade_id = None
        self._pay_param = None
        self._product_code = None
        self._seller_id = None
        self._store_id = None
        self.discriminator = None

        self.credit_agreement_id = credit_agreement_id
        self.credit_biz_order_id = credit_biz_order_id
        self.credit_pay_mode = credit_pay_mode
        self.disable_pay_channels = disable_pay_channels
        self.enable_pay_channels = enable_pay_channels
        if ext_user_info is not None:
            self.ext_user_info = ext_user_info
        if extend_params is not None:
            self.extend_params = extend_params
        if goods_detail is not None:
            self.goods_detail = goods_detail
        self.goods_type = goods_type
        self.merchant_trade_id = merchant_trade_id
        self.pay_param = pay_param
        self.product_code = product_code
        self.seller_id = seller_id
        self.store_id = store_id

    @property
    def credit_agreement_id(self):
        """Gets the credit_agreement_id of this V1ExtraAlipayApp.  # noqa: E501

        [ONLY IN RESPONSE] 信用支付协议号  # noqa: E501

        :return: The credit_agreement_id of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: str
        """
        return self._credit_agreement_id

    @credit_agreement_id.setter
    def credit_agreement_id(self, credit_agreement_id):
        """Sets the credit_agreement_id of this V1ExtraAlipayApp.

        [ONLY IN RESPONSE] 信用支付协议号  # noqa: E501

        :param credit_agreement_id: The credit_agreement_id of this V1ExtraAlipayApp.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and credit_agreement_id is None:
            raise ValueError("Invalid value for `credit_agreement_id`, must not be `None`")  # noqa: E501

        self._credit_agreement_id = credit_agreement_id

    @property
    def credit_biz_order_id(self):
        """Gets the credit_biz_order_id of this V1ExtraAlipayApp.  # noqa: E501

        [ONLY IN RESPONSE] 信用支付业务订单号  # noqa: E501

        :return: The credit_biz_order_id of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: str
        """
        return self._credit_biz_order_id

    @credit_biz_order_id.setter
    def credit_biz_order_id(self, credit_biz_order_id):
        """Sets the credit_biz_order_id of this V1ExtraAlipayApp.

        [ONLY IN RESPONSE] 信用支付业务订单号  # noqa: E501

        :param credit_biz_order_id: The credit_biz_order_id of this V1ExtraAlipayApp.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and credit_biz_order_id is None:
            raise ValueError("Invalid value for `credit_biz_order_id`, must not be `None`")  # noqa: E501

        self._credit_biz_order_id = credit_biz_order_id

    @property
    def credit_pay_mode(self):
        """Gets the credit_pay_mode of this V1ExtraAlipayApp.  # noqa: E501

        [ONLY IN RESPONSE] 信用支付模式  # noqa: E501

        :return: The credit_pay_mode of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: str
        """
        return self._credit_pay_mode

    @credit_pay_mode.setter
    def credit_pay_mode(self, credit_pay_mode):
        """Sets the credit_pay_mode of this V1ExtraAlipayApp.

        [ONLY IN RESPONSE] 信用支付模式  # noqa: E501

        :param credit_pay_mode: The credit_pay_mode of this V1ExtraAlipayApp.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and credit_pay_mode is None:
            raise ValueError("Invalid value for `credit_pay_mode`, must not be `None`")  # noqa: E501

        self._credit_pay_mode = credit_pay_mode

    @property
    def disable_pay_channels(self):
        """Gets the disable_pay_channels of this V1ExtraAlipayApp.  # noqa: E501

        禁用渠道  # noqa: E501

        :return: The disable_pay_channels of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: str
        """
        return self._disable_pay_channels

    @disable_pay_channels.setter
    def disable_pay_channels(self, disable_pay_channels):
        """Sets the disable_pay_channels of this V1ExtraAlipayApp.

        禁用渠道  # noqa: E501

        :param disable_pay_channels: The disable_pay_channels of this V1ExtraAlipayApp.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and disable_pay_channels is None:
            raise ValueError("Invalid value for `disable_pay_channels`, must not be `None`")  # noqa: E501

        self._disable_pay_channels = disable_pay_channels

    @property
    def enable_pay_channels(self):
        """Gets the enable_pay_channels of this V1ExtraAlipayApp.  # noqa: E501

        可用渠道  # noqa: E501

        :return: The enable_pay_channels of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: str
        """
        return self._enable_pay_channels

    @enable_pay_channels.setter
    def enable_pay_channels(self, enable_pay_channels):
        """Sets the enable_pay_channels of this V1ExtraAlipayApp.

        可用渠道  # noqa: E501

        :param enable_pay_channels: The enable_pay_channels of this V1ExtraAlipayApp.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and enable_pay_channels is None:
            raise ValueError("Invalid value for `enable_pay_channels`, must not be `None`")  # noqa: E501

        self._enable_pay_channels = enable_pay_channels

    @property
    def ext_user_info(self):
        """Gets the ext_user_info of this V1ExtraAlipayApp.  # noqa: E501

        外部指定买家  # noqa: E501

        :return: The ext_user_info of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: V1ExtraAlipayExtUserInfo
        """
        return self._ext_user_info

    @ext_user_info.setter
    def ext_user_info(self, ext_user_info):
        """Sets the ext_user_info of this V1ExtraAlipayApp.

        外部指定买家  # noqa: E501

        :param ext_user_info: The ext_user_info of this V1ExtraAlipayApp.  # noqa: E501
        :type: V1ExtraAlipayExtUserInfo
        """

        self._ext_user_info = ext_user_info

    @property
    def extend_params(self):
        """Gets the extend_params of this V1ExtraAlipayApp.  # noqa: E501

        业务扩展参数  # noqa: E501

        :return: The extend_params of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: V1ExtraAlipayExtendParams
        """
        return self._extend_params

    @extend_params.setter
    def extend_params(self, extend_params):
        """Sets the extend_params of this V1ExtraAlipayApp.

        业务扩展参数  # noqa: E501

        :param extend_params: The extend_params of this V1ExtraAlipayApp.  # noqa: E501
        :type: V1ExtraAlipayExtendParams
        """

        self._extend_params = extend_params

    @property
    def goods_detail(self):
        """Gets the goods_detail of this V1ExtraAlipayApp.  # noqa: E501

        商品明细列表  # noqa: E501

        :return: The goods_detail of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: list[V1ExtraAlipayGoodsDetail]
        """
        return self._goods_detail

    @goods_detail.setter
    def goods_detail(self, goods_detail):
        """Sets the goods_detail of this V1ExtraAlipayApp.

        商品明细列表  # noqa: E501

        :param goods_detail: The goods_detail of this V1ExtraAlipayApp.  # noqa: E501
        :type: list[V1ExtraAlipayGoodsDetail]
        """

        self._goods_detail = goods_detail

    @property
    def goods_type(self):
        """Gets the goods_type of this V1ExtraAlipayApp.  # noqa: E501

        商品类型  # noqa: E501

        :return: The goods_type of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: str
        """
        return self._goods_type

    @goods_type.setter
    def goods_type(self, goods_type):
        """Sets the goods_type of this V1ExtraAlipayApp.

        商品类型  # noqa: E501

        :param goods_type: The goods_type of this V1ExtraAlipayApp.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and goods_type is None:
            raise ValueError("Invalid value for `goods_type`, must not be `None`")  # noqa: E501

        self._goods_type = goods_type

    @property
    def merchant_trade_id(self):
        """Gets the merchant_trade_id of this V1ExtraAlipayApp.  # noqa: E501

        [ONLY IN RESPONSE] 商户订单号  # noqa: E501

        :return: The merchant_trade_id of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: str
        """
        return self._merchant_trade_id

    @merchant_trade_id.setter
    def merchant_trade_id(self, merchant_trade_id):
        """Sets the merchant_trade_id of this V1ExtraAlipayApp.

        [ONLY IN RESPONSE] 商户订单号  # noqa: E501

        :param merchant_trade_id: The merchant_trade_id of this V1ExtraAlipayApp.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and merchant_trade_id is None:
            raise ValueError("Invalid value for `merchant_trade_id`, must not be `None`")  # noqa: E501

        self._merchant_trade_id = merchant_trade_id

    @property
    def pay_param(self):
        """Gets the pay_param of this V1ExtraAlipayApp.  # noqa: E501

        [ONLY IN RESPONSE] App 用于拉起支付的请求字符串  # noqa: E501

        :return: The pay_param of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: str
        """
        return self._pay_param

    @pay_param.setter
    def pay_param(self, pay_param):
        """Sets the pay_param of this V1ExtraAlipayApp.

        [ONLY IN RESPONSE] App 用于拉起支付的请求字符串  # noqa: E501

        :param pay_param: The pay_param of this V1ExtraAlipayApp.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and pay_param is None:
            raise ValueError("Invalid value for `pay_param`, must not be `None`")  # noqa: E501

        self._pay_param = pay_param

    @property
    def product_code(self):
        """Gets the product_code of this V1ExtraAlipayApp.  # noqa: E501

        销售产品码，商家和支付宝签约的产品码  # noqa: E501

        :return: The product_code of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this V1ExtraAlipayApp.

        销售产品码，商家和支付宝签约的产品码  # noqa: E501

        :param product_code: The product_code of this V1ExtraAlipayApp.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")  # noqa: E501

        self._product_code = product_code

    @property
    def seller_id(self):
        """Gets the seller_id of this V1ExtraAlipayApp.  # noqa: E501

        [ONLY IN RESPONSE] 支付宝卖家支付宝用户ID  # noqa: E501

        :return: The seller_id of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this V1ExtraAlipayApp.

        [ONLY IN RESPONSE] 支付宝卖家支付宝用户ID  # noqa: E501

        :param seller_id: The seller_id of this V1ExtraAlipayApp.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and seller_id is None:
            raise ValueError("Invalid value for `seller_id`, must not be `None`")  # noqa: E501

        self._seller_id = seller_id

    @property
    def store_id(self):
        """Gets the store_id of this V1ExtraAlipayApp.  # noqa: E501

        商户门店编号  # noqa: E501

        :return: The store_id of this V1ExtraAlipayApp.  # noqa: E501
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this V1ExtraAlipayApp.

        商户门店编号  # noqa: E501

        :param store_id: The store_id of this V1ExtraAlipayApp.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")  # noqa: E501

        self._store_id = store_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ExtraAlipayApp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ExtraAlipayApp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ExtraAlipayApp):
            return True

        return self.to_dict() != other.to_dict()
